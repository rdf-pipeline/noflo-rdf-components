# rdf-sparql-clear-load-content.fbp

# Takes RDF content string and inserts it into the target-graph (IRI) at the sparql-endpoint.
# The optional inport auth_file_env is an environment variable name that contains a file name, which contains the base64 encoded username:password to be included for HTTP Basic authentication.
# Requires the remote endpoint to have http access to this system through the
# BASE_URL, such as http://localhost:1337/
# If a reverse tunnel is need, maybe a command like this will help: ssh -R 1337:localhost:1337 192.168.0.1

# Exports
INPORT=request.URL:SPARQL_ENDPOINT
INPORT=setGraph.VALUE:TARGET_GRAPH_URI
INPORT=content.IN:RDF_CONTENT
INPORT=delivery.TYPE:RDF_TYPE
INPORT=request.AUTH_FILE_ENV:AUTH_FILE_ENV
INPORT=setUrl.VALUE:BASE_URL
INPORT=delivery.LISTEN:LISTEN
OUTPORT=request.OUTPUT:OUTPUT

# Initial Information Packets (IIP)
'application/sparql-update' -> TYPE request(rdf-components/http-basic-post)
'sparql/clear-load-base-url-vnid.ru.hbs' -> FILENAME ru(rdf-components/read-content) OUTPUT -> BODY request

# Set the default headers in the request
'' -> VALUE setGraph

# Use graph as a sparql update parameter in the request body
'graph-uri' -> KEY setGraph(rdf-components/object) OUTPUT -> PARAMETERS request
'base-url' -> KEY setUrl(rdf-components/object) OUTPUT -> PARAMETERS request
'vnid' -> KEY setVnid(rdf-components/object)
'/vnid' -> GET getVnid(rdf-components/json-pointer)
'/data' -> SET getVnid

# Read the VNID from the content in the request and deliver the content in the response
content(core/Repeat) OUT -> CONTENT delivery(rdf-components/http-delivery-server)
content OUT -> INPUT getVnid OUTPUT -> VALUE setVnid OUTPUT -> INPUT request

# Error handling echos errors to console.log
ru ERROR -> IN error
request ERROR -> IN error
error(core/Repeat) OUT -> IN output(core/Output)
