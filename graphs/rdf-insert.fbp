# rdf-insert.fbp

# Takes RDF JS Interface Graph object and inserts it into the target-graph (IRI) at the sparql-endpoint.
# The optional inport auth_file_env is an environment variable name that contains a file name, which contains the base64 encoded username:password to be included for HTTP Basic authentication.

# Exports
INPORT=request.URL:SPARQL_ENDPOINT
INPORT=regroup.IN:TARGET_GRAPH_URI
INPORT=ntriples.INPUT:RDF_GRAPH
INPORT=authFile.KEY:AUTH_FILE_ENV
OUTPORT=request.OUTPUT:OUTPUT

# Initial Information Packets (IIP)
'^\s*(\S*)\s*$' -> PATTERN basic(strings/Replace)
'{"Authorization":"Basic $1","Content-Type":"application/sparql-update"}' -> REPLACEMENT basic

# 'graph' -> {graph: 'GRAPH'}
'graph' -> GROUP regroup(groups/Regroup) OUT -> PROPERTY insertGraph(objects/InsertProperty)
'POST' -> METHOD request

# 'Content-Type=application/sparql-update' -> {"Content-Type": "application/sparql-update"}
'{"Content-Type":"application/sparql-update"}' -> IN parseHeaders(strings/ParseJson) OUT -> HEADERS request
'"INSERT DATA {\n{{#if graph}}GRAPH <{{{graph}}}>{\n{{/if}}\n{{#each tokens}}{{{this}}}{{/each}}\n{{#if graph}}\n}\n{{/if}}\n}"' -> IN parse(strings/ParseJson) OUT -> BODY request

# 'AUTH_FILE_ENV' -> 'username:password' -> 'Authorization=Basic username:password' -> 'Authorization=Basic username:password,Content-Type=application/sparql-update' -> {"Authorization":"Basic username:password","Content-Type":"application/sparql-update"}
authFile(core/ReadEnv) OUT -> IN readAuth(filesystem/ReadFile) OUT -> IN basic OUT -> IN parseHeaders

# JSON-LD -> {tokens: ['']} -> {graph:'', tokens:['']} -> No Content
ntriples OUTPUT -> IN insertGraph OUT -> INPUT request

# Error Handling echos errors to console.log
repeat(core/Repeat) OUT -> IN output(core/Output)
ntriples(rdf-components/rdf-ntriples) ERROR -> IN repeat
request(rdf-components/request-template) ERROR -> IN repeat
