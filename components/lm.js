/**
 * Lm.js
 *
 * This file contains the code used to create a high resolution last modified (LM) string 
 * that will be unique to the current node instance (not globally unique). 
 *
 * For easy comparison, an LM is a decimal number represented as a fixed-length string, such as:
 * LM1328113669.00000000000000001
 * where the number before the decimal point is the number of seconds since the epoch (on that 
 * node's host). The digits after the decimal point are generated from a global counter to ensure 
 * that no two LMs ever generated by two separate calls.
 *
 * For more information about RDF pipeline LMs, please refer to 
 * https://github.com/rdf-pipeline/framework/wiki/LM
 */


// Global LM - used to track the last LM generated to avoid dups
globalLm = { timestamp: Date.now(),  
             counter: 0 };

/**
 * Builds and returns a new LM object 
 *
 * @return the new LM 
 */
function Lm() { 

    this.timestamp = Date.now();
    this.counter = 0;

       // Does my new lm have a different timestamp from the last one?
       if (this.timestamp === globalLm.timestamp) {
           // Got identical timestamps - increment the counter
           this.counter = ++globalLm.counter;
       } else {
          // Different timestamps.  We can set the globalLm to the current Lm values
          // so the next time we get called, we know what we last had
          globalLm = { timestamp: this.timestamp, 
                       counter: 0};
       }
}

var MAXINT_DIGITS = (Number.MAX_SAFE_INTEGER.toString().split('')).length;

/**
 * Converts an LM object into a fixed length primitive string with a format like: 
 *   LM1328113669.123456000001
 *
 * @return LM represented as a string
 */
Lm.prototype.toString =  function() {
    var counterLength = this.counter.toString().length;
    return 'LM'+this.timestamp+'.'+Array(MAXINT_DIGITS-counterLength+1).join("0") + this.counter;
}

/**
 * Builds a new, unique to the node instance, LM string 
 */
module.exports = function() {

    return new Lm().toString();
};
